import random
from pynetics import ga_list


class IntegerIndividualSpawningPool(ga_list.ListIndividualSpawningPool):
    """ Defines the methods for creating integer individuals. """

    def __init__(self, size, lower, upper):
        """ Initializes this spawning pool for generating list individuals.

        :param size: The size of the individuals to be created from this
            spawning pool.
        :param lower: the lower bound of the integer set (included).
        :param upper: the upper bound of the integer set (included).
        """
        super().__init__(
            size,
            ga_list.FiniteSetAlleles(range(lower, upper + 1))
        )
        self.lower = lower
        self.upper = upper


class IntegerRangeCrossover(ga_list.ListCrossover):
    """ Offspring is obtained by crossing individuals gene by gene.

    For each gene, the interval of their values is calculated. Then, the
    difference of the interval is used for calculating the new interval from
    where to pick the values of the new genes. First, a value is taken from the
    new interval. Second, the other value is calculated by taking the
    symmetrical by the center of the range.
    """
    parents_num = 2

    def perform(self, individuals):
        """ Applies the crossover operator.

        :param individuals: The individuals to cross to generate progeny.
        :return: A list of individuals.
        """
        i1, i2 = individuals[0], individuals[1]
        i1_lower = i1.population.spawning_pool.lower
        i1_upper = i1.population.spawning_pool.upper
        i2_lower = i2.population.spawning_pool.lower
        i2_upper = i2.population.spawning_pool.upper
        child1, child2 = i1.population.spawn(), i2.population.spawn()
        for i, genes in enumerate(zip(i1, i2)):
            # For each gene, we calculate the the crossover interval. If the
            # genes are equal, we take the whole possible interval
            a, b = genes
            if a != b:
                diff = abs(a - b)
            else:
                diff = abs(min(i1_lower, i2_lower) - max(i1_upper, i2_upper))

            child1[i] = max(
                min(random.randint(a - diff, b + diff), i1_upper),
                i1_lower
            )
            child2[i] = max(
                min(a + b - child1[i], i2_upper),
                i2_lower
            )  # Just in case individuals generated by different spawning pools.
        return [child1, child2, ]
